summary(base$SUPER)
table(base$SUPER)
round(prop.table(table(base$SUPER, base$sitde), margin=1),4)
table(base$SUPER)
table(base$SUPER)
table(base$SUPER)
round(prop.table(table(base$SUPER, base$sitde), margin=1),4)
table(base$Q1)
table(base$AP0)
table(base$AP0)
round(prop.table(table(base$AP0, base$sitde), margin=1),4)
table(base$AP2D)
round(prop.table(table(base$AP2D, base$sitde), margin=1),4)
table(base$AP6)
round(prop.table(table(base$AP6, base$sitde), margin=1),4)
table(base$AP18)
round(prop.table(table(base$AP18, base$sitde), margin=1),4)
table(base$ep15)
round(prop.table(table(base$ep15, base$sitde), margin=1),4)
table(base$stat_emb_EDI)
table(base$stat_fin_EDI)
round(prop.table(table(base$stat_fin_EDI, base$sitde), margin=1),4)
base <- base %>%
mutate(EDI = case_when(stat_emb=="03"~ 1, stat_emb=="04" ~ 1 ,stat_fin=="03" ~ 1,stat_fin=="04"~ 1, TRUE ~ 0))
base <- base %>%
mutate(id=as.numeric(id),DATDN=as.numeric(DATDN),`if`=as.numeric(`if`),idnc=as.numeric(idnc))
library(dplyr)
base <- base %>%
mutate(duree = case_when(
EDI == 1 & (stat_emb != "04" & stat_emb != "03") ~ as.numeric(idnc - id),
EDI == 1 & (stat_fin != "04" & stat_fin != "03") ~ as.numeric(DATDN - id),
TRUE ~ `if` - id
))
library(dplyr)
library(survival)
library(survminer)
# Ajustement du modèle de Kaplan-Meier
km_fit <- survfit(Surv(duree, EDI) ~ 1, data = base)
# Résultats du modèle
summary(km_fit)
# Visualisation de la fonction de survie estimée
ggsurvplot(km_fit, data = base, xlab = "durée en mois", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, ggtheme = theme_minimal())
# Ajustement du modèle de Cox
cox_model <- coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 + AP2D + ep15 + AP6 + AP18 + GEO1, data = base)
# Résultats du modèle
summary(cox_model)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model)
# Visualisation des résidus de Schoenfeld
ggcoxzph(cox.zph(cox_model))
##le model final
model_cox_final=coxph(Surv(duree, EDI) ~  nivsor9 + phdip9 + SUPER + IMP39 +AP2D +AP18+GEO1, data = base)
# Résultats du modèle
summary(model_cox_final)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model_final)
step(cox_model)
model_cox_final=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
model_cox_final=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model_final)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_final)
# Créer des variables d'interaction avec le temps pour chaque covariable
base$nivsor9_time <- base$nivsor9 * base$duree
base$SUPER_time <- base$SUPER * base$duree
base$IMP39_time <- base$IMP39 * base$duree
base$SUPER_time <- base$SUPER * base$duree
# Créer des variables d'interaction avec le temps pour chaque covariable
base$nivsor9_time <- base$nivsor9 * base$duree
base$phdip9_time <- base$phdip9 * base$duree
# Créer des variables d'interaction avec le temps pour chaque covariable
base$nivsor9_time <- base$nivsor9 * base$duree
base$phdip9_time <- base$phdip9 * base$duree
km_fit_super <- survfit(Surv(duree, EDI) ~ SUPER, data = base)
# Résultats du modèle
summary(km_fit_super)
# Visualisation de la fonction de survie estimée par zone geographique
ggsurvplot(km_fit_super, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
# Visualisation de la fonction de survie estimée par zone geographique
ggsurvplot(km_fit_super, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
# Visualisation de la fonction de survie estimée par genre
ggsurvplot(km_fit_sexe, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
km_fit_niv_sortie <- survfit(Surv(duree, EDI) ~ nivsor9, data = base)
# Résultats du modèle
summary(km_fit_niv_sortie)
# Visualisation de la fonction de survie estimée par niveau de sortie
ggsurvplot(km_fit_niv_sortie, data = base, xlab = "durée en mois", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
#Modèle de Cox stratifié
model_cox_final=coxph(Surv(duree, EDI) ~  Q1  + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1 + strata(phdip9), data = base)
best_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
best_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(best_model_cox)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1 + strata(phdip9), data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + SUPER + AP0 +
AP2D  + AP18 + GEO1 + strata(phdip9) + strata(ep15), data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + SUPER + AP0 +
AP2D  + AP18 + GEO1 + phdip9 + strata(phdip9) + strata(ep15), data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
# Modèle de Cox avec interaction avec le temps
model_cox_time <- coxph(Surv(duree, EDI) ~ Q1 + SUPER + AP0 + AP2D + AP18 + GEO1 + strata(phdip9) + strata(ep15) + Q1:duree + SUPER:duree + AP0:duree + AP2D:duree + AP18:duree, data = base)
# Modèle de Cox avec interaction avec le temps
model_cox_time <- coxph(Surv(duree, EDI) ~ Q1 + SUPER + AP0 + AP2D + AP18 + GEO1 + strata(phdip9) + strata(ep15) + Q1:duree + SUPER:duree + AP0:duree + AP2D:duree + AP18:duree, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_time)
# Modèle de Cox avec interaction avec le temps
model_cox_time <- coxph(Surv(duree, EDI) ~ Q1 + SUPER + AP0 + AP2D + AP18 + GEO1 + strata(phdip9) + strata(ep15) + Q1:duree + SUPER:duree + AP0:duree + AP2D:duree + AP18:duree, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_time)
# Modèle de Cox avec interaction avec le temps
model_cox_time <- coxph(Surv(duree, EDI) ~ Q1 + SUPER + AP0 + AP2D + AP18 + GEO1 + strata(phdip9) + strata(ep15) + Q1:duree + SUPER:duree + AP0:duree + AP2D:duree + AP18:duree, data = base)
final_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
final_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
summary(final_model_cox)
summary(final_model_cox)
# Afin d'éviter le problème des valeurs manquantes nous allons definir nos modalités de référence pour chaque variable.
base$SUPER <- relevel(base$SUPER, ref = "Atteint niveau supérieur")
# Afin d'éviter le problème des valeurs manquantes nous allons definir nos modalités de référence pour chaque variable.
base$SUPER <- relevel(as.factor(base$SUPER), ref = "Atteint niveau supérieur")
# Afin d'éviter le problème des valeurs manquantes nous allons definir nos modalités de référence pour chaque variable.
base$SUPER <- relevel(as.factor(base$SUPER), ref = "Atteint niveau supérieur")
base$phdip9 <- relevel(as.factor(base$phdip9), ref = "Non diplômé")
base$AP0 <- relevel(as.factor(base$AP0), ref = "contrat d'apprentissage non terminé")
summary(final_model_cox)
base$AP0 <- relevel(as.factor(base$AP0), ref = "contrat d'apprentissage non terminé")
base$ep15 <- relevel(as.factor(base$ep15), ref = "Autres")
summary(final_model_cox)
base$AP18 <- relevel(as.factor(base$ep15), ref = "pas de Contrat d'apprentissage antérieur")
base$AP18 <- relevel(as.factor(base$AP18), ref = "pas de Contrat d'apprentissage antérieur")
# Ajustement du modèle de Cox
cox_model <- coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 + AP2D + ep15 + AP6 + AP18 + GEO1, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model)
step(cox_model)
base$GEO1 <- relevel(as.factor(base$GEO1), ref = "Uniquement dans votre région ")
base$GEO1 <- relevel(as.factor(base$GEO1), ref = "Uniquement dans votre région")
step(cox_model)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + ep15 +
AP2D  + AP18 + GEO1  + strata(SUPER) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
final_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
summary(final_model_cox)
base$AP2D <- relevel(as.factor(base$AP2D), ref = "ni travail ni stage")
base$AP2D <- relevel(as.factor(base$AP2D), ref = "ni travail ni stage")
final_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
summary(final_model_cox)
library(dplyr)
library(forcats)
# Création d'une copie de database pour conserver l'original
base <- database
# Convertir les colonnes de caractère en facteur, sauf "IDENT"
base <- base %>%
mutate(across(where(is.character) & !one_of("IDENT"), as.factor))
# Convertir les colonnes de caractère en facteur, sauf "IDENT"
base <- base %>%
mutate(across(where(is.character) & !one_of("IDENT"), as.factor))
# Boucle pour recoder chaque colonne de facteur
for (col in names(base)) {
# Vérifiez si la colonne est factorielle (catégorielle)
if (is.factor(base[[col]])) {
# Remplace les niveaux vides par NA
levels(base[[col]])[levels(base[[col]]) == ""] <- NA
}
}
## Labelisation de la variable phdip9
base$phdip9 <- as.character(base$phdip9)
base$phdip9[base$phdip9 == "1"] <- "Non diplômé"
base$phdip9[base$phdip9 == "2"] <- "CAP-BEP-MC"
base$phdip9[base$phdip9 == "3"] <- "Bac"
base$phdip9[base$phdip9 == "4"] <- "Deug"
base$phdip9[base$phdip9 == "5"] <- "BTS-DUT-Santé-social"
base$phdip9[base$phdip9 == "6"] <- "Licence L3"
base$phdip9[base$phdip9 == "7"] <- "Maîtrise M1, MST..."
base$phdip9[base$phdip9 == "8"] <- "DEA-DESS-Master-M2"
base$phdip9[base$phdip9 == "9"] <- "Doctorat"
## Labelisation de la variable SUPER
base$SUPER <- as.character(base$SUPER)
base$SUPER[base$SUPER == "1"] <- "Atteint niveau supérieur"
base$SUPER[base$SUPER == "2"] <- "Pas atteint niveau supérieur"
## Labelisation de la variable IMP39
base$IMP39 <- as.character(base$IMP39)
base$IMP39[base$IMP39 == "1"] <- " 1ère et 2ème année de DEUG"
base$IMP39[base$IMP39 == "2"] <- " 1ère et 2ème année de DUT"
base$IMP39[base$IMP39 == "3"] <- " 1ère et 2ème année de BTS "
base$IMP39[base$IMP39 == "4"] <- " Autres "
## Labelisation de la variable Q1 (Sexe)
base$Q1 <- as.character(base$Q1)
base$Q1[base$Q1 == "1"] <- "homme"
base$Q1[base$Q1 == "2"] <- "femme"
## Labelisation de la variable AP0  (terminé un contrat d'apprentissage)
base$AP0 <- as.character(base$AP0)
base$AP0[base$AP0 == "1"] <- "contrat d'apprentissage terminé"
base$AP0[base$AP0 == "2"] <- "contrat d'apprentissage non terminé"
## Labelisation de la variable AP2D
base$AP2D <- as.character(base$AP2D)
base$AP2D[base$AP2D == "1"] <- "travail ou stage"
base$AP2D[base$AP2D == "2"] <- "ni travail ni stage"
## Labelisation de la variable AP6
base$AP6 <- as.character(base$AP6)
base$AP6[base$AP6 == "1"] <- "Oui, souvent"
base$AP6[base$AP6 == "2"] <- "Oui, parfois"
base$AP6[base$AP6 == "3"] <- "Oui, rarement"
base$AP6[base$AP6 == "4"] <- "Non, jamais"
## Labelisation de la variable AP18
base$AP18 <- as.character(base$AP18)
base$AP18[base$AP18 == "1"] <- "Contrat d'apprentissage antérieur"
base$AP18[base$AP18 == "2"] <- "pas de Contrat d'apprentissage antérieur"
## Labelisation de la variable ep15
base$ep15 <- as.character(base$ep15)
base$ep15[base$ep15 == "1"] <- "Par l'ANPE "
base$ep15[base$ep15 == "2"] <- "Par une mission locale, une PAIO"
base$ep15[base$ep15 == "3"] <- "L'APEC"
base$ep15[base$ep15 == "4"] <- "Votre établissement de formation"
base$ep15[base$ep15 == "5"] <- "Par une de vos relations"
base$ep15[base$ep15 == "6"] <- "Par une petite annonce (presse, internet)"
base$ep15[base$ep15 == "7"] <- "(NE PAS CITER) Par une candidature spontanée"
base$ep15[base$ep15 == "8"] <- "(NE PAS CITER) Par l'intérim"
base$ep15[base$ep15 == "9"] <- "Autres"
## Labelisation de la variable ep25
base$ep25 <- as.character(base$ep25)
base$ep25[base$ep25 == "1"] <- "Changement de statut"
base$ep25[base$ep25 == "2"] <- "pas de Changement de statut"
## Labelisation de la variable GEO1
base$GEO1 <- as.character(base$GEO1)
base$GEO1[base$GEO1 == "1"] <- "Uniquement dans votre région"
base$GEO1[base$GEO1 == "2"] <- "Uniquement dans une autre région"
base$GEO1[base$GEO1 == "3"] <- "Dans plusieurs régions"
base$GEO1[base$GEO1 == "4"] <- "Dans toute la FRANCE"
base$GEO1[base$GEO1 == "5"] <- "En FRANCE ou à l'étranger"
## Labelisation de la variable SITDE
base$sitde <- as.character(base$sitde)
base$sitde[base$sitde == "1"] <- "Emploi"
base$sitde[base$sitde == "2"] <- "Chômage"
base$sitde[base$sitde == "3"] <- "Inactivité"
base$sitde[base$sitde == "4"] <- "Formation"
base$sitde[base$sitde == "5"] <- "Reprise d’études"
base <- base %>%
mutate(stat_emb_EDI = case_when(stat_emb=="03"~ 1, stat_emb=="04" ~ 1, TRUE ~ 0))
## Labelisation de la variable stat_emb_EDI
base$stat_emb_EDI <- as.character(base$stat_emb_EDI)
base$stat_emb_EDI[base$stat_emb_EDI == "1"] <- "emb_EDI"
base$stat_emb_EDI[base$stat_emb_EDI == "0"] <- "Autres"
base <- base %>%
mutate(stat_fin_EDI = case_when(stat_fin=="03"~ 1, stat_fin=="04" ~ 1, TRUE ~ 0))
## Labelisation de la variable stat_emb_EDI
base$stat_fin_EDI <- as.character(base$stat_fin_EDI)
base$stat_fin_EDI[base$stat_fin_EDI == "1"] <- "fin_EDI"
base$stat_fin_EDI[base$stat_fin_EDI == "0"] <- "Autres"
round(prop.table(table(base$phdip9, base$sitde), margin=1),4)
table(base$SUPER)
round(prop.table(table(base$SUPER, base$sitde), margin=1),4)
table(base$Q1)
round(prop.table(table(base$Q1, base$sitde), margin=1),4)
table(base$AP0)
round(prop.table(table(base$AP0, base$sitde), margin=1),4)
table(base$AP2D)
round(prop.table(table(base$AP2D, base$sitde), margin=1),4)
table(base$AP6)
round(prop.table(table(base$AP6, base$sitde), margin=1),4)
table(base$AP18)
round(prop.table(table(base$AP18, base$sitde), margin=1),4)
table(base$ep15)
round(prop.table(table(base$ep15, base$sitde), margin=1),4)
table(base$stat_emb_EDI)
round(prop.table(table(base$stat_emb_EDI, base$sitde), margin=1),4)
table(base$stat_fin_EDI)
round(prop.table(table(base$stat_fin_EDI, base$sitde), margin=1),4)
base <- base %>%
mutate(EDI = case_when(stat_emb=="03"~ 1, stat_emb=="04" ~ 1 ,stat_fin=="03" ~ 1,stat_fin=="04"~ 1, TRUE ~ 0))
base <- base %>%
mutate(id=as.numeric(id),DATDN=as.numeric(DATDN),`if`=as.numeric(`if`),idnc=as.numeric(idnc))
library(dplyr)
base <- base %>%
mutate(duree = case_when(
EDI == 1 & (stat_emb != "04" & stat_emb != "03") ~ as.numeric(idnc - id),
EDI == 1 & (stat_fin != "04" & stat_fin != "03") ~ as.numeric(DATDN - id),
TRUE ~ `if` - id
))
library(dplyr)
library(survival)
library(survminer)
# Ajustement du modèle de Kaplan-Meier
km_fit <- survfit(Surv(duree, EDI) ~ 1, data = base)
# Résultats du modèle
summary(km_fit)
# Visualisation de la fonction de survie estimée
ggsurvplot(km_fit, data = base, xlab = "durée en mois", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, ggtheme = theme_minimal())
table(base$EDI)
# Ajustement du modèle de Kaplan-Meier
km_fit <- survfit(Surv(duree, EDI) ~ 1, data = base)
# Résultats du modèle
summary(km_fit)
table(base$EDI)
# Ajustement du modèle de Kaplan-Meier
km_fit <- survfit(Surv(duree, EDI) ~ 1, data = base)
# Résultats du modèle
summary(km_fit)
km_fit_sexe <- survfit(Surv(duree, EDI) ~ Q1, data = base)
# Résultats du modèle
summary(km_fit_sexe)
# Visualisation de la fonction de survie estimée par genre
ggsurvplot(km_fit_sexe, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
# Test de log-rank pour comparer les courbes de survie par genre
survdiff(Surv(duree, EDI) ~ Q1, data = base)
km_fit_niv_sortie <- survfit(Surv(duree, EDI) ~ nivsor9, data = base)
# Résultats du modèle
summary(km_fit_niv_sortie)
# Visualisation de la fonction de survie estimée par niveau de sortie
ggsurvplot(km_fit_niv_sortie, data = base, xlab = "durée en mois", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
# Test de log-rank pour comparer les courbes de niveau de sortie
survdiff(Surv(duree, EDI) ~ nivsor9, data = base)
km_fit_geo <- survfit(Surv(duree, EDI) ~ GEO1, data = base)
# Résultats du modèle
summary(km_fit_geo)
# Visualisation de la fonction de survie estimée par zone geographique
ggsurvplot(km_fit_geo, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
# Test de log-rank pour comparer les courbes de zone geographique
survdiff(Surv(duree, EDI) ~ GEO1, data = base)
km_fit_super <- survfit(Surv(duree, EDI) ~ SUPER, data = base)
# Résultats du modèle
summary(km_fit_super)
# Visualisation de la fonction de survie estimée par zone geographique
ggsurvplot(km_fit_super, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
# Test de log-rank pour comparer les courbes de sorti de superieur
survdiff(Surv(duree, EDI) ~ SUPER, data = base)
km_fit_Q1_SUPER <- survfit(Surv(duree, EDI) ~ Q1+SUPER, data = base)
# Résultats du modèle
summary(km_fit_Q1_SUPER)
# Visualisation de la fonction de survie estimée par zone geographique
ggsurvplot(km_fit_Q1_SUPER, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
# Test de log-rank pour comparer les courbes de genre et sorti du superieur
survdiff(Surv(duree, EDI) ~ Q1+SUPER, data = base)
# Afin d'éviter le problème des valeurs manquantes nous allons definir nos modalités de référence pour chaque variable.
base$SUPER <- relevel(as.factor(base$SUPER), ref = "Atteint niveau supérieur")
base$phdip9 <- relevel(as.factor(base$phdip9), ref = "Non diplômé")
base$AP0 <- relevel(as.factor(base$AP0), ref = "contrat d'apprentissage non terminé")
base$AP2D <- relevel(as.factor(base$AP2D), ref = "ni travail ni stage")
base$ep15 <- relevel(as.factor(base$ep15), ref = "Par l'ANPE")
# Afin d'éviter le problème des valeurs manquantes nous allons definir nos modalités de référence pour chaque variable.
base$SUPER <- relevel(as.factor(base$SUPER), ref = "Atteint niveau supérieur")
base$phdip9 <- relevel(as.factor(base$phdip9), ref = "Non diplômé")
base$AP0 <- relevel(as.factor(base$AP0), ref = "contrat d'apprentissage non terminé")
base$AP2D <- relevel(as.factor(base$AP2D), ref = "ni travail ni stage")
base$ep15 <- relevel(as.factor(base$ep15), ref = "Par l'ANPE")
base$ep15 <- relevel(as.factor(base$ep15), ref = "Par l'ANPE")
base$AP18 <- relevel(as.factor(base$AP18), ref = "pas de Contrat d'apprentissage antérieur")
base$GEO1 <- relevel(as.factor(base$GEO1), ref = "Uniquement dans votre région")
base$ep15 <- relevel(as.factor(base$ep15), ref = "Par l'ANPE")
base$AP18 <- relevel(as.factor(base$AP18), ref = "pas de Contrat d'apprentissage antérieur")
base$GEO1 <- relevel(as.factor(base$GEO1), ref = "Uniquement dans votre région")
base$ep15 <- relevel(as.factor(base$ep15), ref = "Par l'ANPE")
summary(base$ep15)
table(base$ep15)
base$ep15[base$ep15 == "Par l'ANPE "] <- "Par l'ANPE"
base$ep15[base$ep15 == "1"] <- "Par l'ANPE"
base$ep15 <- relevel(as.factor(base$ep15), ref = "Par l'ANPE")
## Labelisation de la variable strateg
base <- base %>%
mutate(Strat = case_when(
grepl("^A", strateg) ~ "Formation agricole",
grepl("^s", strateg) ~ "Ecole de la santé et du social",
grepl("^C", strateg) ~ " Apprenti du lycée",
grepl("^G", strateg) ~ "Apprenti du supérieur",
grepl("^I", strateg) ~ "Institut Universitaire de
Formation des Maitres",
grepl("^J", strateg) ~ "Directions Régionales Jeunesse et Sport",
grepl("^R", strateg) ~ "Rectorats",
grepl("^U", strateg) ~ "Universités",
grepl("^Z", strateg) ~ "Ecoles du supérieur"))
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + ep15 +
AP2D  + AP18 + GEO1  + SUPER + strata(Strat) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
# Ajustement du modèle de Cox
cox_model <- coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 + AP2D + ep15 + AP6 + AP18 + GEO1+ strateg, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model)
step(cox_model)
step(cox_model)
# Ajustement du modèle de Cox
cox_model <- coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 + AP2D + ep15 + AP6 + AP18 + GEO1+ strateg, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model)
# Visualisation des résidus de Schoenfeld
ggcoxzph(cox.zph(cox_model))
step(cox_model)
best_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(best_model_cox)
step(cox_model)
best_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(best_model_cox)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + ep15 +
AP2D  + AP18 + GEO1  + SUPER + strata(Strat) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
# Modèle de Cox avec interaction avec le temps
model_cox_time <- coxph(Surv(duree, EDI) ~ Q1 + SUPER + AP0 + AP2D + AP18 + GEO1 + strata(phdip9) + strata(ep15) + Q1:duree + SUPER:duree + AP0:duree + AP2D:duree + AP18:duree, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_time)
# Modèle de Cox avec interaction avec le temps
model_cox_time <- coxph(Surv(duree, EDI) ~ Q1 + SUPER + AP0 + AP2D + AP18 + GEO1 + strata(phdip9) + strata(ep15) + Q1:duree + SUPER:duree + AP0:duree + AP2D:duree + AP18:duree, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_time)
# Modèle de Cox avec interaction avec le temps
model_cox_time <- coxph(Surv(duree, EDI) ~ Q1 + SUPER + AP0 + AP2D + AP18 + GEO1 + strata(phdip9) + strata(ep15) + Q1:duree + SUPER:duree + AP0:duree + AP2D:duree + AP18:duree, data = base)
# Ajustement du modèle de Cox
cox_model <- coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 + AP2D + ep15 + AP6 + AP18 + GEO1+ strateg, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model)
# Visualisation des résidus de Schoenfeld
ggcoxzph(cox.zph(cox_model))
step(cox_model)
# Ajustement du modèle de Cox
cox_model <- coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 + AP2D + ep15 + AP6 + AP18 + GEO1+ strateg, data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model)
# Visualisation des résidus de Schoenfeld
ggcoxzph(cox.zph(cox_model))
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(cox_model)
# Visualisation des résidus de Schoenfeld
ggcoxzph(cox.zph(cox_model))
best_model_cox=coxph(Surv(duree, EDI) ~  Q1 + phdip9 + SUPER + AP0 +
AP2D + ep15 + AP18 + GEO1, data = base)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + ep15 +
AP2D  + AP18 + GEO1  + SUPER + strata(Strat) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + AP18 + GEO1  + SUPER + strata(Strat) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + AP18 + GEO1  + SUPER + AP2D + ep15 + strata(Strat) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + AP18 + GEO1  + SUPER + strata(Strat) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + AP18 + GEO1  + SUPER + AP2D + ep15 + strata(Strat) , data = base)
#Modèle de Cox stratifié
model_cox_strat=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + AP18 + GEO1  + SUPER + AP2D + ep15 + strata(Strat) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_strat)
AIC(model_cox_strat, model_cox_final)
BIC(model_cox_strat, model_cox_final)
AIC(model_cox_strat, model_cox_final)
# Visualisation des résidus de Schoenfeld
ggcoxzph(cox.zph(model_cox_final))
#Modèle final
model_cox_final=coxph(Surv(duree, EDI) ~  Q1  + phdip9 + AP0 + AP18 + GEO1  + SUPER + strata(Strat) , data = base)
# Test de Schoenfeld pour vérifier les risques proportionnels
cox.zph(model_cox_final)
# Visualisation des résidus de Schoenfeld
ggcoxzph(cox.zph(model_cox_final))
# Visualisation des résidus de Schoenfeld
ggcoxzph(cox.zph(model_cox_final))
summary(model_cox_final)
km_fit_sexe <- survfit(Surv(duree, EDI) ~ Q1, data = base)
# Résultats du modèle
summary(km_fit_sexe)
# Visualisation de la fonction de survie estimée par genre
ggsurvplot(km_fit_sexe, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
# Test de log-rank pour comparer les courbes de survie par genre
survdiff(Surv(duree, EDI) ~ Q1, data = base)
# Résultats du modèle
summary(km_fit_sexe)
# Visualisation de la fonction de survie estimée par genre
ggsurvplot(km_fit_sexe, data = base, xlab = "durée", ylab = "Probabilité de survie",
conf.int = TRUE, risk.table = TRUE, pval = TRUE, ggtheme = theme_minimal())
